
potentially:
auto
const
float
int
struct
void
enum

break
continue
for
while
do
switch
case
default



I want:
either
- boxes instead of pointers AND structs or arrays
OR
- tables that are always reference type


----
- boxes instead of pointers
    - boxes are reference pointers to a copy of a value that exists in that scope only?
        e.g. x = 4; box b = box(x); x = 7; x != unbox(b);
        setbox(b, unbox(b) + 2);
- tables instead of structs?
- vectors or arrays or something
- hashtable? or dictionary?



---

InterpretAST(ast)

    switch(ast->GetType())
    {
        // statements

        case ASTNodeType::ASSIGN:  {
            auto v = static_cast<ASTAssignment*>(ast);
            auto var = static_cast<ASTVariable*>(v->id)
            std::string variableName = var->id;
            GLOBAL_SCOPE[variableName] = EvaluateCOExpression(v->expr); // can return number, bool, string, table?
        } break;

        case ASTNodeType::RETURN: {
            auto v = static_cast<ASTReturn*>(ast);
            DoReturn(EvaluateCOExpression(v->expr));
        } break;

        case ASTNodeType::BRANCH: {
            auto v = static_cast<ASTBranch*>(ast);

            if(EvaluateCOExpression(v->condition))
            {
                DoStatement(v->if_body);
            }
            else
            {
                DoStatement(v->else_body);
            }
        } break;



        // expression evaluations:

        case ASTNodeType::BINOP: {
            auto v = static_cast<ASTBinOp*>(ast);

            switch (v->op)
            {
                case BinOp::Add: break;
                case BinOp::Sub: break;
                case BinOp::Mul: break;
                case BinOp::Div: break;
            }

            v->left or right must be a binop, a number, variable representing a number, or function call returning a number
            switch v->left->GetType()
                case BinOp: DoBinOp(v->left)
                case Number: GetNum(v->left)
                case Variable: GetNumFromVar(v->left)
                case Function: GetNumFromFunc(v->left)

            lhs = InterpretAST(v->left);
            rhs = InterpretAST(v->right);
        } break;

        case ASTNodeType::RELOP: {
            auto v = static_cast<ASTRelOp*>(ast);

            switch (v->op)
            {
                case RelOp::LT: break;
                case RelOp::GT: break;
                case RelOp::LE: break;
                case RelOp::GE: break;
                case RelOp::EQ: break;
                case RelOp::NEQ: break;
                case RelOp::AND: break;
                case RelOp::OR: break;
            }

            InterpretAST(v->left);
            InterpretAST(v->right);
        } break;

        case ASTNodeType::LOGICALNOT: {
            auto v = static_cast<ASTLogicalNot*>(ast);

            InterpretAST(v->boolExpr);
        } break;

        case ASTNodeType::VARIABLE: {
            auto v = static_cast<ASTVariable*>(ast);
            return GLOBAL_SCOPE[variableName] ?
            // take variable name string and turn it into a symbol table reference?
        } break;

        case ASTNodeType::NUMBER: {
            auto v = static_cast<ASTNumberTerminal*>(ast);
            //
        } break;

        case ASTNodeType::BOOLEAN: {
            auto v = static_cast<ASTBooleanTerminal*>(ast);
        } break;
    }








